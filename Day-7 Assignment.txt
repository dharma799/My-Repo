
5 Modify the script to handle errors, such as the directory already existing or lacking permissions to create files. Add a debugging mode that prints additional information when enabled. edit Show in shell script


#!/bin/bash

DEBUG=false

while getopts ":d" opt; do
  case $opt in
    d) DEBUG=true;;
    \?) echo "Invalid option: -$OPTARG"; exit 1;;
  esac
done
shift $((OPTIND-1))

if [ $# -ne 1 ]; then
  echo "Usage: $0 [-d] <directory_path>"
  exit 1
fi

DIRECTORY=$1

if $DEBUG; then
  echo "Creating directory '$DIRECTORY'..."
fi

if [ -d "$DIRECTORY" ]; then
  if $DEBUG; then
    echo "Directory '$DIRECTORY' already exists."
  else
    echo "Error: Directory '$DIRECTORY' already exists."
    exit 1
  fi
else
  if mkdir "$DIRECTORY"; then
    if $DEBUG; then
      echo "Directory '$DIRECTORY' created successfully."
    fi
  else
    echo "Error: Unable to create directory '$DIRECTORY'."
    exit 1
  fi
fi





6 Given a sample log file, write a script using grep to extract all lines containing "ERROR". Use awk to print the date, time, and error message of each extracted line. Data Processing wit
Edit

#!/bin/bash

# Sample log file
LOG_FILE="log_file.log"

# Extract lines containing "ERROR" using grep
grep "ERROR" "$LOG_FILE" | awk '{print $1, $2, $7}' | awk '{print $1" "$2": "$3}'




1 Ensure the script checks if a specific file (e.g., myfile.txt) exists in the current directory. If it exists, print "File exists", otherwise print "File not found".

#!/bin/bash

# Set the file to check
FILE="myfile.txt"

# Check if the file exists
if [ -f "$FILE" ]; then
  echo "File exists"
else
  echo "File not found"
fi



2 Write a script that reads numbers from the user until they enter '0'. The script should also print whether each number is odd or even.

Edit


#!/bin/bash

echo "Enter a number (or 0 to quit):"
read num

while [ $num -ne 0 ]; do
  if [ $((num % 2)) -eq 0 ]; then
    echo "$num is even"
  else
    echo "$num is odd"
  fi

  echo "Enter a number (or 0 to quit):"
  read num
done

echo "Goodbye!"



3 Create a function that takes a filename as an argument and prints the number of lines in the file. Call this function from your script with different filenames.

#!/bin/bash

# Define a function to count the number of lines in a file
count_lines() {
  local file="$1"
  if [ -f "$file" ]; then
    lines=$(wc -l < "$file")
    echo "File '$file' has $lines lines."
  else
    echo "File '$file' not found."
  fi
}

# Call the function with different filenames
count_lines "example1.txt"
count_lines "example2.txt"
count_lines "nonexistent_file.txt"
count_lines "example3.txt"



4 Write a script that creates a directory named TestDir and inside it, creates ten files named File1.txt, File2.txt, ... File10.txt. Each file should contain its filename as its content (e.g., File1.txt contains "File1.txt").

#!/bin/bash

# Create the directory
mkdir TestDir

# Create the files and add their names as content
for i in {1..10}; do
  filename="File$i.txt"
  echo "$filename" > "TestDir/$filename"
done


7 create a script that takes a text file and replace all occurrence of "old_text" with "new_text".Use sed to perform this operation and output the result to a new file


#!/bin/bash

# Set the input file, old text, and new text
INPUT_FILE="input.txt"
OLD_TEXT="old_text"
NEW_TEXT="new_text"
OUTPUT_FILE="output.txt"

# Use sed to replace all occurrences of OLD_TEXT with NEW_TEXT
sed "s/${OLD_TEXT}/${NEW_TEXT}/g" "${INPUT_FILE}" > "${OUTPUT_FILE}"

echo "Replacement complete! Output saved to ${OUTPUT_FILE}"
